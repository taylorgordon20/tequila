#!/usr/bin/env python3

import collections
import os
from conans import ConanFile

CC_LIBRARY_TEMPLATE = """
cc_library(
  name = "{name}",
  srcs = [{srcs}],
  hdrs = glob(["{include_dir}/**"]),
  strip_include_prefix = "{include_dir}",
)
"""

BUILD_TEMPLATE = """# auto-generated by conan recipe
package(default_visibility = ["//visibility:public"])

cc_library(
  name = "lib",
  deps = [{include_names}]
)
{include_rules}"""


def format_string_list(strings):
  return ", ".join(f"\"{s}\"" for s in strings)


class BazelRecipe(ConanFile):
  settings = "os", "compiler", "build_type", "arch"
  requires = "<REQUIREMENT>"

  def imports(self):
    # Symlink all of the static library files.
    libs = []
    for libdir in self.deps_cpp_info.libdirs:
      for lib in os.listdir(libdir):
        os.symlink(os.path.join(libdir, lib), lib)
        libs.append(lib)

    # Define a cc_library rule for each include directory.
    includes = collections.OrderedDict()
    for i, includedir in enumerate(self.deps_cpp_info.includedirs):
      include = f"includes_{i}"
      os.symlink(includedir, include)
      includes[f"{include}_lib"] = CC_LIBRARY_TEMPLATE.format(
          name = f"{include}_lib",
          srcs = format_string_list(libs),
          include_dir = include,
      )

    # Output the bazel BUILD file for this library.
    with open("BUILD", "w") as build_file:
      build_file.write(
          BUILD_TEMPLATE.format(
              include_names = format_string_list(includes.keys()),
              include_rules = "".join(includes.values()),
          )
      )
